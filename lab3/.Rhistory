My Name\newline
The Date Today\newline
Lab Partner\newline
1. **Task 1**
```{r, echo = TRUE}
# This is just an example #
print('STA 521 is the best')
```
2. **Task 2**
```{r, echo = TRUE}
x <- 1+1
print(x)
```
install.packages("rmarkdown")
install.packages("rmarkdown")
?rnorm
rnorm(5)
class(rnorm(5))
str(rnorm(5))
c(list(1), "a")
set.seed(1234)
set.seed(1234)
Var1 <- rnorm(n=100)
Var2 <- rnorm(n=100)
Var3 <- rnorm(n=100)
Var1
print(Var1)
print(Var1, Var1)
print(Var1, Var2)
?print
print(Var1)
print(Var2)
print(Var3)
myMatrix <- matrix(Var1, 10, 10)
myMatrix
Var1
(Var1)
(2+3)
{2+3; 4+5}
(invisible(2+3))
{invisible(2+3)}
?get
get(Var1)
get("Var1")
testVar <- get("Var1")
identical(testVar, Var1)
old.par <- par(mfrow=c(2,1))
plot(Var1, Var2)
hist(Var1)
par(old.par)
plot(Var1, Var2)
?plot
?hist
hist(Var1)
hist(Var1, col=blue, border=white)
hist(Var1, col="blue", border="white")
hist(Var1, col="deepskyblue", border="white")
hist(Var2, col="deepskyblue", border="white")
plot(x=Var2, y=Var1, pch=16, cex=0.5, main='Scatterplot Var1 vs. Var2')
plot(x=Var2, y=Var1, pch=16, cex=1, main='Scatterplot Var1 vs. Var2')
plot(x=Var2, y=Var1, pch=16, cex=1, col="darkorange", main='Scatterplot Var1 vs. Var2')
hist(Var1, col="deepskyblue", border="white")
hist(Var2, col="deepskyblue", border="white")
old.par <- par(mfrow=c(3,1))
# scatter plot of Var1 vs. Var2
plot(x=Var2, y=Var1, pch=16, cex=1, col="darkorange", main='Scatterplot Var1 vs. Var2')
# histograms
hist(Var1, col="deepskyblue", border="white")
hist(Var2, col="deepskyblue", border="white")
par(old.par)
?par
?layout
plot(x=Var2, y=Var1, pch=16, cex=1, col="darkorange", main='Scatterplot Var1 vs. Var2')
x <- pmin(3, pmax(-3, stats::rnorm(50)))
y <- pmin(3, pmax(-3, stats::rnorm(50)))
xhist <- hist(x, breaks = seq(-3,3,0.5), plot = FALSE)
yhist <- hist(y, breaks = seq(-3,3,0.5), plot = FALSE)
top <- max(c(xhist$counts, yhist$counts))
xrange <- c(-3, 3)
yrange <- c(-3, 3)
nf <- layout(matrix(c(2,0,1,3),2,2,byrow = TRUE), c(3,1), c(1,3), TRUE)
layout.show(nf)
par(mar = c(3,3,1,1))
plot(x, y, xlim = xrange, ylim = yrange, xlab = "", ylab = "")
par(mar = c(0,3,1,1))
barplot(xhist$counts, axes = FALSE, ylim = c(0, top), space = 0)
par(mar = c(3,0,1,1))
barplot(yhist$counts, axes = FALSE, xlim = c(0, top), space = 0, horiz = TRUE)
par(def.par)  #- reset to default
matrix(c(2,0,1,3),2,2,byrow = TRUE)
nf <- layout(matrix(c(2, 0, 1, 3), 2, 2, byrow=TRUE), widths=c(3,1), heights=c(1,3), respect=TRUE)
layout.show(nf)
old.par <- par(mar=c(3,3,1,1))
def.par <- par(no.readonly = TRUE) # save default, for resetting
plot(x=Var2, y=Var1, pch=16, cex=1, col="darkorange", main='Scatterplot Var1 vs. Var2')
par()
tstly <- layout(matrix(c(1,1,0,2), 2, 2, byrow = TRUE))
layout.show(2)
layout.show()
def.par <- par(no.readonly = TRUE) # save default, for resetting
nf <- layout(matrix(c(2, 0, 1, 3), 2, 2, byrow=TRUE), widths=c(3,1), heights=c(1,3), respect=TRUE)
layout.show()
layout.show(3)
# reference: help document of layout
old.par <- par(no.readonly = TRUE) # save default, for resetting
nf <- layout(matrix(c(2, 0, 1, 3), 2, 2, byrow=TRUE), widths=c(3,1), heights=c(1,3), respect=TRUE)
par(mar=c(3,3,1,1))
# scatter plot of Var1 vs. Var2
plot(x=Var2, y=Var1, pch=16, cex=1, col="darkorange", main='Scatterplot Var1 vs. Var2')
# histograms
par(mar=c(0,3,1,1))
xhist <- hist(Var2, plot=FALSE)
barplot(xhist$counts, axes=FALSE, ylim=c(0,top), space=0, col="deepskyblue", border="white")
par(mar=c(3,0,1,1))
yhist <- hist(Var1, plot=FALSE)
barplot(yhist$counts, axes=FALSE, xlim=c(0,top), space=0, col="deepskyblue", border="white", horiz=TRUE)
par(old.par) # reset to default
hist(Var2)
hist(Var1)
par(mfrow=c(1,1))
hist(Var1)
hist(Var2)
plot(x=Var2, y=Var1, pch=16, cex=1, col="darkorange", main='Scatterplot Var1 vs. Var2')
old.par <- par(no.readonly = TRUE) # save default, for resetting
plot(x=Var2, y=Var1, pch=16, cex=1, col="darkorange", main='Scatterplot Var1 vs. Var2')
par(mfrow=c(1,1))
old.par <- par(no.readonly = TRUE) # save default, for resetting
old.par
plot(x=Var2, y=Var1, pch=16, cex=1, col="darkorange", main='Scatterplot Var1 vs. Var2')
nf <- layout(matrix(c(2, 0, 1, 3), 2, 2, byrow=TRUE), widths=c(3,1), heights=c(1,3), respect=TRUE)
par(mar=c(3,3,1,1))
# scatter plot of Var1 vs. Var2
plot(x=Var2, y=Var1, pch=16, cex=1, col="darkorange", main='Scatterplot Var1 vs. Var2')
?par
par(mar=c(3,3,1,1))
# scatter plot of Var1 vs. Var2
plot(x=Var2, y=Var1, pch=16, cex=1, col="darkorange", main='Scatterplot Var1 vs. Var2')
par(old.par) # reset to default
old.par <- par(no.readonly = TRUE) # save default, for resetting
nf <- layout(matrix(c(2, 0, 1, 3), 2, 2, byrow=TRUE), widths=c(3,1), heights=c(1,3), respect=TRUE)
par(mar=c(3,3,1,1))
# scatter plot of Var1 vs. Var2
plot(x=Var2, y=Var1, pch=16, cex=1, col="darkorange", main='Scatterplot Var1 vs. Var2')
par(old.par) # reset to default
old.par <- par(no.readonly = TRUE) # save default, for resetting
nf <- layout(matrix(c(2, 0, 1, 3), 2, 2, byrow=TRUE), widths=c(3,1), heights=c(1,3), respect=TRUE)
par(mar=c(0,3,1,1))
# scatter plot of Var1 vs. Var2
plot(x=Var2, y=Var1, pch=16, cex=1, col="darkorange", main='Scatterplot Var1 vs. Var2')
par(old.par) # reset to default
old.par <- par(no.readonly = TRUE) # save default, for resetting
nf <- layout(matrix(c(2, 0, 1, 3), 2, 2, byrow=TRUE), widths=c(3,1), heights=c(1,3), respect=TRUE)
par(mar=c(3,3,1,1))
# scatter plot of Var1 vs. Var2
plot(x=Var2, y=Var1, pch=16, cex=1, col="darkorange", main='Scatterplot Var1 vs. Var2')
?plot
par(old.par) # reset to default
old.par <- par(no.readonly = TRUE) # save default, for resetting
nf <- layout(matrix(c(2, 0, 1, 3), 2, 2, byrow=TRUE), widths=c(3,1), heights=c(1,3), respect=TRUE)
par(mar=c(3,3,1,1))
# scatter plot of Var1 vs. Var2
plot(x=Var2, y=Var1, pch=16, cex=1, col="darkorange", main='Scatterplot Var1 vs. Var2', xlab="Var2", ylab="Var1")
par(old.par) # reset to default
old.par <- par(no.readonly = TRUE) # save default, for resetting
nf <- layout(matrix(c(2, 0, 1, 3), 2, 2, byrow=TRUE), widths=c(3,1), heights=c(1,3), respect=TRUE)
par(mar=c(5,5,1,1))
# scatter plot of Var1 vs. Var2
plot(x=Var2, y=Var1, pch=16, cex=1, col="darkorange", main='Scatterplot Var1 vs. Var2')
par(mar=c(0,3,1,1))
xhist <- hist(Var2, plot=FALSE)
barplot(xhist$counts, axes=FALSE, ylim=c(0,top), space=0, col="deepskyblue", border="white")
par(old.par) # reset to default
old.par <- par(no.readonly = TRUE) # save default, for resetting
nf <- layout(matrix(c(2, 0, 1, 3), 2, 2, byrow=TRUE), widths=c(3,1), heights=c(1,3), respect=TRUE)
par(mar=c(5,5,1,1))
# scatter plot of Var1 vs. Var2
plot(x=Var2, y=Var1, pch=16, cex=1, col="darkorange", main='Scatterplot Var1 vs. Var2')
# histograms
par(mar=c(0,5,2,1))
xhist <- hist(Var2, plot=FALSE)
barplot(xhist$counts, axes=FALSE, ylim=c(0,top), space=0, col="deepskyblue", border="white")
par(old.par) # reset to default
old.par <- par(no.readonly = TRUE) # save default, for resetting
nf <- layout(matrix(c(2, 0, 1, 3), 2, 2, byrow=TRUE), widths=c(3,1), heights=c(1,3), respect=TRUE)
par(mar=c(3,3,1,1))
# scatter plot of Var1 vs. Var2
plot(x=Var2, y=Var1, pch=16, cex=1, col="darkorange", main='Scatterplot Var1 vs. Var2')
# histograms
par(mar=c(0,3,2,1))
xhist <- hist(Var2, plot=FALSE)
barplot(xhist$counts, axes=FALSE, ylim=c(0,top), space=0, col="deepskyblue", border="white")
par(mar=c(3,0,1,2))
yhist <- hist(Var1, plot=FALSE)
barplot(yhist$counts, axes=FALSE, xlim=c(0,top), space=0, col="deepskyblue", border="white", horiz=TRUE)
par(old.par) # reset to default
data.frame(Var1, Var2)
taskFunction(2, Var1, Var2, Var3, c("Var1", "Var2", "Var3"))
taskFunction <- function(p=2, ..., nameVector=c("Var1", "Var2")) {
return(data.frame(...))
}
taskFunction(2, Var1, Var2, Var3, c("Var1", "Var2", "Var3"))
taskFunction(2, Var1, Var2, Var3, nameVector=c("Var1", "Var2", "Var3"))
taskFunction(2, c("Var1", "Var2", "Var3"), Var1, Var2, Var3)
taskFunction <- function(p=2,nameVector=c("Var1", "Var2"), ...) {
return(data.frame(...))
}
taskFunction(2, c("Var1", "Var2", "Var3"), Var1, Var2, Var3)
taskFunction <- function(p,nameVector, ...) {
return(data.frame(...))
}
taskFunction(2, c("Var1", "Var2"), Var1, Var2)
testdf <- data.frame(Var1, Var2)
testdf$attributes
str(test)
str(testdf)
colnames(testdf)
length(Var1)
?apply
apply(testdf, 1, max)
apply(testdf, 2, max)
max(Var1)
newv <- apply(testdf, 1, max)
mean(newv)
newv
boxplot(newv)
pdf("testplot.pdf")
boxplot(newv)
dev.off()
getwd()
dirname(sys.frame(1)$ofile)
taskFunction <- function(p, nameVector, ...) {
if (length(nameVector) != p) {
print("Length of nameVector does not equal to p...")
return(FALSE)
}
# combine vectors
df <- data.frame(...)
colnames(df) <- nameVector
# get row wise maximum
rowMax <- apply(df, 1, max)
# plot boxplot and store to pdf
pdf("boxplot.pdf")
boxplot(rowMax)
dev.off()
# return mean
return(mean(rowMax))
}
taskFunction(2, c("Var1", "Var2"), Var1, Var2)
taskFunction(2, c("Var1", "Var2"), Var1, Var2)
taskFunction <- function(p, nameVector, ...) {
if (length(nameVector) != p) {
print("Length of nameVector does not equal to p...")
return(FALSE)
}
# combine vectors
df <- data.frame(...)
colnames(df) <- nameVector
# get row wise maximum
rowMax <- apply(df, 1, max)
# plot boxplot and store to pdf
pdf("boxplot.pdf")
boxplot(rowMax)
#dev.off()
# return mean
return(mean(rowMax))
}
taskFunction(2, c("Var1", "Var2"), Var1, Var2)
taskFunction <- function(p, nameVector, ...) {
if (length(nameVector) != p) {
print("Length of nameVector does not equal to p...")
return(FALSE)
}
# combine vectors
df <- data.frame(...)
colnames(df) <- nameVector
# get row wise maximum
rowMax <- apply(df, 1, max)
# plot boxplot and store to pdf
pdf("boxplot.pdf")
boxplot(rowMax)
dev.off()
# return mean
return(mean(rowMax))
}
taskFunction(2, c("Var1", "Var2"), Var1, Var2)
?layout
taskFunction(2, c("Var1"), Var)
system('kpsewhich framed.sty')
sessionInfo()
?boxplot
dim(testdf)
dim(testdf)[1]
dim(testdf)[2]
str(dim(testdf))
class(dim(testdf))
c(1,2)[1]
ncol(testdf)
load("/Users/xuhong/Documents/Duke/Term 3/sta 521/lab1/row_max_vector.RData")
?apply
vector2 <- c("5",7,12)
vector2[2] + vector2[3]
vector[2]
vector2[2]
vector2[3]
dataframe3 <- data.frame(z1="5",z2=7,z3=12)
dataframe3[1,2] + dataframe3[1,3]
dataframe3
list4 <- list(z1="6", z2=42, z3="49", z4=126)
list4
list4[[2]]+list4[[4]]
list4[2]+list4[4]
list4[2]
str(list4[2])
class(list4[2])
seq(1:10)
seq(1:10, 2)
?sq
?seq
seq(1, 10, 2)
seq(1, 10000, by=372)
len(seq(1, 10000, by=372))
length(seq(1, 10000, by=372))
seq(1, 10000, length.out=50)
seq(0, 1, length.out = 11)
rep(1:3, times=3)
rep(1:3, each=3)
?rep
mySeq <- seq(1:25)
mySeq
?sample
sampleSeq <- sample(mySeq, size=5, replace=TRUE)
?rnorm
myData <- rnorm(n=100, mean=0, sd=1)
vector(c(1,))
vector(c(1,2))
vector(1
)
?vector
?as.matrix
ml <- vector("list", length=5)
ml
for(i in ml) {}
for(i in ml) {print(i)}
for(i in ml) { i <- 1}
ml
for(i in ml) { i <- 1}
for(i in ml) { i <- 1; print(i)}
for(i in ml) { print(i)}
for (name in names(ml)) {ml[[name]] <- 1}
ml
for (name in names(ml)) {print name}
for (name in names(ml)) {print(name)}
attr(ml)
attribute(ml)
attributes(ml)
ml[[1]]
ml[[2]]
ml[[0]]
for(i in 1:5) {ml[[i]] <- }
for(i in 1:5) {ml[[i]] <- 1}
ml
tl <- list(a=1, b=2)
tl
tl[['a']]
tl$a
names(tl)
tl[[1]]
tl[[2]]
tl$2
tv <- rnorm(100)
tm <- as.matrix(tv, 10, 10, T)
tm
dim(tm)
tv
?as.matrix
tm <- as.matrix(tv, 10, 10, byrow=TRUE)
dim(tm)
tm
tm <- matrix(tv, 10, 10, byrow=TRUE)
tm
apply(tm, 1, function(x){sample(x, 10, T)}
)
tm
apply(tm, 1, sample, size=10, replace=TRUE)
tm[1,]
sample(tm[1,], 10, T)
?apply
apply(tm, 1, mean)
apply(tm, 1, length)
apply(tm, 1, function(x){x[10]-x[1]})
apply
?apply
?sample
sample(c(0,1), 100, replace = TRUE)
sample(c(0,1), 100, replace = F)
tm
tm.T
?transppose
?transpose
t(tm)
?rowSums
tm
tdf <- data.fram(a=c(1,2,3), b=c("a", "b", "c"))
tdf <- data.frame(a=c(1,2,3), b=c("a", "b", "c"))
tdf
which(tdf$a > 1)
tdf[which(tdf$a > 1),]
tdf$a > 1
?sample
sample(tm)
tm
class(tm)
sample(tm)
tm
tm[1,]
si <- sample(1:10, 5, T)
si
tm[si, ]
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
library(dev_tools)
install.packages("dev_tools")
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
library("dev_tools")
library("devtools")
has_devel()
devtools::install_github("hadley/devtools")
library("devtools")
has_devel()
library("devtools")
has_devel()
myTextMiner(myQuery, myCorp)
require(tm)
load("lab3.Rdata")
# determine how many documents are present
length(shakespeare)
setwd("~/")
setwd("~/Documents/Duke/Term 3/sta 521/lab3")
require(tm)
load("lab3.Rdata")
# determine how many documents are present
length(shakespeare)
```
# 2. create a corpus
```{r}
corp <- Corpus(VectorSource(shakespeare))
myQuery <- c("something","rotten", "state","denmark")
myTextMiner <- function(query, corpus) {
##
## Input:
## - query: a string vector containing keywords
## - corpus: a VCorpus that needs preprocessing
## Output:
## - result.matrix: a subset of the normalized DTM with those
##   columns that are shared with the query, with one additional
##   column that contains  the  Euclidean  distance
##
## 1. pre-processing
# convert to lower case
corpus <- tm_map(corpus, content_transformer(tolower))
# puntual removal
corpus <- tm_map(corpus, removePunctuation)
# number removal
corpus <- tm_map(corpus, removeNumbers)
## 2. creat a document term matrix
# create a document term matrix
dtm <- DocumentTermMatrix(corpus)
# and store it as matrix
dtm <- as.matrix(dtm)
## 3. pre-process the query
q.table <- table(myQuery)
# get the list of word in the query
q.names <- names(q.table)
# get the number each word occurs
q.values <- as.vector(q.table)
## 4. combine the query into the matrix
# make a  1 * (number of columns) dimension matrix, initialize to default value 0
n.row <- nrow(dtm)
n.col <- ncol(dtm)
q.row <- matrix(rep(0, n.col), 1, n.col)
# combine the query
dtm <- rbind(dtm, q.row)
# assigne the words to their corresponding value
dtm[n.row+1, q.names] <- q.values
## 5. normalize the documents
# define a helper function that normalize each row
normalizeFunc <- function(x) {
# input:
# x: a vector of terms for a document
x/sum(x)
}
# apply the normalize function to every row (documents and query)
norm.dtm <- apply(dtm, 1, normalizeFunc)
norm.dtm <- t(norm.dtm)
## 6. compute the distance
computeDistance <- function(x, q) {
# input:
# x: a vector of normalized terms for a document
# q: a vector of normalized terms for the query
sqrt(sum((x - q)^2))
}
distance.metric <- apply(norm.dtm, 1, computeDistance, q=norm.dtm[n.row+1,])
## 7. produce the result matrix
result.matrix <- cbind(norm.dtm[, q.names], distance.metric)
colnames(result.matrix) <- c(q.names, 'distanceMatrix')
rownames(result.matrix)[n.row+1] <- "query"
return(result.matrix)
}
myCorp <- Corpus(VectorSource(shakespeare))
(resultDTM <- myTextMiner(myQuery, myCorp))
sort(resultDTM$distanceMatrix)
sort(resultDTM[,'distanceMatrix'])
?write.csv
