##
## Input:
## c_object, the clustered object
## df, the original data frame
##
## Returns:
## maxCH, the maximum CH index computed.
##
computeCH <- function(n_cluster, c_object, df) {
## a helper function that computes
## CH index for a given number of clusters
part <- cutree(c_object, n_cluster)
CH <- intCriteria(as.matrix(df), part, "Calinski_Harabasz")
CH$calinski_harabasz
}
CH <- vector(mode="numeric", length=10)
for (i in 1:10) {
CH[i] <-  computeCH(i, c_object, df)
}
plot(CH)
max(CH)
}
findOptimalClustering(singleLinkage, iFinalTennisData)
?max
?lines
findOptimalClustering <- function(c_object, df) {
##
## Input:
## c_object, the clustered object
## df, the original data frame
##
## Returns:
## maxCH, the maximum CH index computed.
##
computeCH <- function(n_cluster, c_object, df) {
## a helper function that computes
## CH index for a given number of clusters
part <- cutree(c_object, n_cluster)
CH <- intCriteria(as.matrix(df), part, "Calinski_Harabasz")
CH$calinski_harabasz
}
CH <- vector(mode="numeric", length=10)
for (i in 1:10) {
CH[i] <-  computeCH(i, c_object, df)
}
plot(CH)
lines(CH)
print(CH)
#max(CH)
}
findOptimalClustering(singleLinkage, iFinalTennisData)
findOptimalClustering <- function(c_object, df) {
##
## Input:
## c_object, the clustered object
## df, the original data frame
##
## Returns:
## maxCH, the maximum CH index computed.
##
computeCH <- function(n_cluster, c_object, df) {
## a helper function that computes
## CH index for a given number of clusters
part <- cutree(c_object, n_cluster)
CH <- intCriteria(as.matrix(df), part, "Calinski_Harabasz")
CH$calinski_harabasz
}
CH <- vector(mode="numeric", length=9)
for (i in 2:10) {
CH[i-1] <-  computeCH(i, c_object, df)
}
plot(CH)
lines(CH)
print(CH)
#max(CH)
}
findOptimalClustering(singleLinkage, iFinalTennisData)
?abline
?lines
findOptimalClustering <- function(c_object, df) {
##
## Input:
## c_object, the clustered object
## df, the original data frame
##
## Returns:
## maxCH, the maximum CH index computed.
##
computeCH <- function(n_cluster, c_object, df) {
## a helper function that computes
## CH index for a given number of clusters
part <- cutree(c_object, n_cluster)
CH <- intCriteria(as.matrix(df), part, "Calinski_Harabasz")
CH$calinski_harabasz
}
CH <- vector(mode="numeric", length=9)
for (i in 2:10) {
# skip 1 since the resulted value is NaN
CH[i-1] <-  computeCH(i, c_object, df)
}
# make the plot
plot(CH, xlab = "number of clusters")
lines(CH)
# find the maximum and add a vertical line
n_max <- which(CH==max(CH))
abline <- (v = n_max, col = "red", lty = 3)
# return the maximum CH index
max(CH)
}
findOptimalClustering <- function(c_object, df) {
##
## Input:
## c_object, the clustered object
## df, the original data frame
##
## Returns:
## maxCH, the maximum CH index computed.
##
computeCH <- function(n_cluster, c_object, df) {
## a helper function that computes
## CH index for a given number of clusters
part <- cutree(c_object, n_cluster)
CH <- intCriteria(as.matrix(df), part, "Calinski_Harabasz")
CH$calinski_harabasz
}
CH <- vector(mode="numeric", length=9)
for (i in 2:10) {
# skip 1 since the resulted value is NaN
CH[i-1] <-  computeCH(i, c_object, df)
}
# make the plot
plot(CH, xlab = "number of clusters")
lines(CH)
# find the maximum and add a vertical line
n_max <- which(CH==max(CH))
abline <- (v = n_max, col = "red", lty = 3)
# return the maximum CH index
max(CH)
}
findOptimalClustering(singleLinkage, iFinalTennisData)
findOptimalClustering <- function(c_object, df) {
##
## Input:
## c_object, the clustered object
## df, the original data frame
##
## Returns:
## maxCH, the maximum CH index computed.
##
computeCH <- function(n_cluster, c_object, df) {
## a helper function that computes
## CH index for a given number of clusters
part <- cutree(c_object, n_cluster)
CH <- intCriteria(as.matrix(df), part, "Calinski_Harabasz")
CH$calinski_harabasz
}
CH <- vector(mode="numeric", length=9)
for (i in 2:10) {
# skip 1 since the resulted value is NaN
CH[i-1] <-  computeCH(i, c_object, df)
}
# make the plot
plot(CH, xlab = "number of clusters")
lines(CH)
# find the maximum and add a vertical line
n_max <- which(CH==max(CH))
abline(v = n_max, col = "red", lty = 3)
# return the maximum CH index
max(CH)
}
findOptimalClustering(singleLinkage, iFinalTennisData)
findOptimalClustering <- function(c_object, df) {
##
## Input:
## c_object, the clustered object
## df, the original data frame
##
## Returns:
## maxCH, the maximum CH index computed.
##
computeCH <- function(n_cluster, c_object, df) {
## a helper function that computes
## CH index for a given number of clusters
part <- cutree(c_object, n_cluster)
CH <- intCriteria(as.matrix(df), part, "Calinski_Harabasz")
CH$calinski_harabasz
}
CH <- vector(mode="numeric", length=9)
for (i in 2:10) {
# skip 1 since the resulted value is NaN
CH[i-1] <-  computeCH(i, c_object, df)
}
# make the plot
plot(CH, xlab = "number of clusters")
lines(CH)
# find the maximum and add a vertical line
n_max <- which(CH==max(CH))
abline(v = n_max, col = "red", lty = 1)
# return the maximum CH index
max(CH)
}
findOptimalClustering(singleLinkage, iFinalTennisData)
findOptimalClustering(completeLinkage, iFinalTennisData)
findOptimalClustering <- function(c_object, df) {
##
## Input:
## c_object, the clustered object
## df, the original data frame
##
## Returns:
## maxCH, the maximum CH index computed.
##
computeCH <- function(n_cluster, c_object, df) {
## a helper function that computes
## CH index for a given number of clusters
part <- cutree(c_object, n_cluster)
CH <- intCriteria(as.matrix(df), part, "Calinski_Harabasz")
CH$calinski_harabasz
}
CH <- vector(mode="numeric", length=9)
for (i in 2:10) {
# skip 1 since the resulted value is NaN
CH[i-1] <-  computeCH(i, c_object, df)
}
# make the plot
plot(CH, xlab = "number of clusters")
lines(CH)
# find the maximum and add a vertical line
n_max <- which(CH==max(CH))
abline(v = n_max, col = "red", lty = 2)
# return the maximum CH index
max(CH)
}
findOptimalClustering(singleLinkage, iFinalTennisData)
findOptimalClustering(completeLinkage, iFinalTennisData)
findOptimalClustering <- function(c_object, df) {
##
## Input:
## c_object, the clustered object
## df, the original data frame
##
## Returns:
## maxCH, the maximum CH index computed.
##
computeCH <- function(n_cluster, c_object, df) {
## a helper function that computes
## CH index for a given number of clusters
part <- cutree(c_object, n_cluster)
CH <- intCriteria(as.matrix(df), part, "Calinski_Harabasz")
CH$calinski_harabasz
}
CH <- vector(mode="numeric", length=9)
for (i in 2:10) {
# skip 1 since the resulted value is NaN
CH[i-1] <-  computeCH(i, c_object, df)
}
# make the plot
plot(CH, xlab = "number of clusters")
lines(CH)
# find the maximum and add a vertical line
n_max <- which(CH==max(CH))
print(n_max)
abline(v = n_max, col = "red", lty = 2)
# return the maximum CH index
max(CH)
}
findOptimalClustering(singleLinkage, iFinalTennisData)
findOptimalClustering(completeLinkage, iFinalTennisData)
findOptimalClustering <- function(c_object, df) {
##
## Input:
## c_object, the clustered object
## df, the original data frame
##
## Returns:
## maxCH, the maximum CH index computed.
##
computeCH <- function(n_cluster, c_object, df) {
## a helper function that computes
## CH index for a given number of clusters
part <- cutree(c_object, n_cluster)
CH <- intCriteria(as.matrix(df), part, "Calinski_Harabasz")
CH$calinski_harabasz
}
CH <- vector(mode="numeric", length=9)
for (i in 2:10) {
# skip 1 since the resulted value is NaN
CH[i-1] <-  computeCH(i, c_object, df)
}
# make the plot
plot(CH, xlab = "number of clusters")
lines(CH)
# find the maximum and add a vertical line
n_max <- which(CH==max(CH)) + 1
print(n_max)
abline(v = n_max, col = "red", lty = 2)
# return the maximum CH index
max(CH)
}
findOptimalClustering(singleLinkage, iFinalTennisData)
findOptimalClustering <- function(c_object, df) {
##
## Input:
## c_object, the clustered object
## df, the original data frame
##
## Returns:
## maxCH, the maximum CH index computed.
##
computeCH <- function(n_cluster, c_object, df) {
## a helper function that computes
## CH index for a given number of clusters
part <- cutree(c_object, n_cluster)
CH <- intCriteria(as.matrix(df), part, "Calinski_Harabasz")
CH$calinski_harabasz
}
CH <- vector(mode="numeric", length=9)
for (i in 2:10) {
# skip 1 since the resulted value is NaN
CH[i-1] <-  computeCH(i, c_object, df)
}
# make the plot
plot(CH + 1, xlab = "number of clusters")
lines(CH)
# find the maximum and add a vertical line
n_max <- which(CH==max(CH)) + 1
print(n_max)
abline(v = n_max, col = "red", lty = 2)
# return the maximum CH index
max(CH)
}
findOptimalClustering(singleLinkage, iFinalTennisData)
findOptimalClustering(completeLinkage, iFinalTennisData)
findOptimalClustering <- function(c_object, df) {
##
## Input:
## c_object, the clustered object
## df, the original data frame
##
## Returns:
## maxCH, the maximum CH index computed.
##
computeCH <- function(n_cluster, c_object, df) {
## a helper function that computes
## CH index for a given number of clusters
part <- cutree(c_object, n_cluster)
CH <- intCriteria(as.matrix(df), part, "Calinski_Harabasz")
CH$calinski_harabasz
}
CH <- vector(mode="numeric", length=10)
for (i in 1:10) {
# skip 1 since the resulted value is NaN
CH[i] <-  computeCH(i, c_object, df)
}
# make the plot
plot(CH, xlab = "number of clusters")
lines(CH)
# find the maximum and add a vertical line
n_max <- which(CH==max(CH))
print(n_max)
abline(v = n_max, col = "red", lty = 2)
# return the maximum CH index
max(CH)
}
findOptimalClustering(singleLinkage, iFinalTennisData)
findOptimalClustering <- function(c_object, df) {
##
## Input:
## c_object, the clustered object
## df, the original data frame
##
## Returns:
## maxCH, the maximum CH index computed.
##
computeCH <- function(n_cluster, c_object, df) {
## a helper function that computes
## CH index for a given number of clusters
part <- cutree(c_object, n_cluster)
CH <- intCriteria(as.matrix(df), part, "Calinski_Harabasz")
CH$calinski_harabasz
}
CH <- vector(mode="numeric", length=10)
for (i in 1:10) {
# skip 1 since the resulted value is NaN
CH[i] <-  computeCH(i, c_object, df)
}
# make the plot
plot(CH, xlab = "number of clusters")
lines(CH)
# find the maximum and add a vertical line
n_max <- which(CH==max(CH, na.rm=T))
print(n_max)
abline(v = n_max, col = "red", lty = 2)
# return the maximum CH index
max(CH)
}
findOptimalClustering(singleLinkage, iFinalTennisData)
t <- c(NaN, 1)
t
is.na(t)
?max
t <- c(NaN, 1, 4)
max(t, na.rm=T)
which(t == 4)
findOptimalClustering <- function(c_object, df) {
##
## Input:
## c_object, the clustered object
## df, the original data frame
##
## Returns:
## maxCH, the maximum CH index computed.
##
computeCH <- function(n_cluster, c_object, df) {
## a helper function that computes
## CH index for a given number of clusters
part <- cutree(c_object, n_cluster)
CH <- intCriteria(as.matrix(df), part, "Calinski_Harabasz")
CH$calinski_harabasz
}
CH <- vector(mode="numeric", length=10)
for (i in 1:10) {
# for i = 1 the resulted value is NaN
CH[i] <-  computeCH(i, c_object, df)
}
# make the plot
plot(CH, xlab = "number of clusters")
lines(CH)
# find the maximum and add a vertical line
n_max <- which(CH==max(CH, na.rm=T))
print(n_max)
abline(v = n_max, col = "red", lty = 2)
# return the maximum CH index
max(CH)
}
findOptimalClustering(singleLinkage, iFinalTennisData)
findOptimalClustering <- function(c_object, df) {
##
## Input:
## c_object, the clustered object
## df, the original data frame
##
## Returns:
## maxCH, the maximum CH index computed.
##
computeCH <- function(n_cluster, c_object, df) {
## a helper function that computes
## CH index for a given number of clusters
part <- cutree(c_object, n_cluster)
CH <- intCriteria(as.matrix(df), part, "Calinski_Harabasz")
CH$calinski_harabasz
}
CH <- vector(mode="numeric", length=10)
for (i in 1:10) {
# for i = 1 the resulted value is NaN
CH[i] <-  computeCH(i, c_object, df)
}
# make the plot
plot(CH, xlab = "number of clusters")
lines(CH)
# find the maximum and add a vertical line
maxCH <- max(CH, na.rm=T)
n_max <- which(CH==maxCH)
print(n_max)
abline(v = n_max, col = "red", lty = 2)
# return the maximum CH index
return(maxCH)
}
findOptimalClustering(singleLinkage, iFinalTennisData)
findOptimalClustering(completeLinkage, iFinalTennisData)
plot(singleLinkage, col = "#487AA1", col.main = "#45ADA8", col.lab = "#7C8071",
col.axis = "#F38630", hang = -1, xlab = "")
install.packages("ape")
library(ape)
# plot basic tree
plot(as.phylo(singleLinkage), cex = 0.9, label.offset = 1)
plot(as.phylo(singleLinkage), cex = 0.4, label.offset = 1)
plot(as.phylo(hc), type="cladogram", cex = 0.4, label.offset = 1)
plot(as.phylo(singleLinkage), type="cladogram", cex = 0.4, label.offset = 1)
plot(as.phylo(singleLinkage), cex = 0.4, label.offset = 1, col = "#487AA1", col.main = "#45ADA8", col.lab = "#7C8071", col.axis = "#F38630")
plot(as.phylo(singleLinkage), cex = 0.4, label.offset = 1)
plot(as.phylo(completeLinkage), cex = 0.4, label.offset = 1)
findOptimalClustering(singleLinkage, iFinalTennisData)
findOptimalClustering(completeLinkage, iFinalTennisData)
plot(as.phylo(singleLinkage), cex = 0.4, label.offset = 1)
plot(as.phylo(completeLinkage), cex = 0.4, label.offset = 1)
findOptimalClustering(singleLinkage, iFinalTennisData)  # optimal n_cluster: 3
findOptimalClustering(completeLinkage, iFinalTennisData) # optimal n_cluster: 2
plot(as.phylo(singleLinkage), cex = 0.4, label.offset = 1)
plot(as.phylo(completeLinkage), cex = 0.4, label.offset = 1)
cutree(singleLinkage)
cutree(singleLinkage, k = 3)
cutree(singleLinkage, k = 3) == 2
cutree(singleLinkage, k = 3)
t <- cutree(singleLinkage, k = 3)
t[t == 2]
t[t == 3]
iFinalTennisData
t[t == 3]
t[t == 2]
iFinalTennisData["J.Reister-L.Rosol", ]
iFinalTennisData["S.Stakhovsky-R.Federer", ]
iFinalTennisData[1, ]
plot(singleLinkage)
plot(singleLinkage, hang=-1)
plot(completeLinkage, hang=-1)
t[t==2]
t[t==3]
plot(singleLinkage, cex = 0.4, hang=-1)
plot(singleLinkage, cex = 0.4, hang=-e-10)
plot(singleLinkage, cex = 0.4, hang=-0.001)
plot(singleLinkage, cex = 0.4, hang = - 1)
