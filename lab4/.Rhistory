?matrix
testMatrix <- matrix(c(1,2,3,4), byrow=T, nrow=2, ncol=2)
(testMatrix <- matrix(c(1,2,3,4), byrow=T, nrow=2, ncol=2))
eigen(testMatrix)
5.3722813 * c(-0.4159736, -0.9093767)
cc <-  c(-0.4159736, -0.9093767)
testMatrix %*% cc
testMatrix[,1]
signif(3.1415927, 2)
?signif
?diag
e <- eigen(testMatrix)
D <- diag(e$values)
D
E <- e$vectors
t(E) %*% D  %*% E
testMatrix
E %*% D  %*% t(E)
testMatrix %*% D %*% t(testMatrix)
E %*% D  %*% inverse(E)
?inv
?inverse
E %*% D  %*% solve(E)
complex(1)
complex(1+0i)
which(c(1,2,3) == 1)
which(c(1,2,3) == 2)
c(1,2,3) == 2
getwd()
load("pageRank.RData")
ls()
dim(myData)
myData
n_links <- rowSums(myData)
M <- diag(n_links)
M
n_links <- colSums(myData)
M <- diag(n_links)
M
n_links
Minv <- solve(M)
Minv
MLnv <- solve(M)
MInv <- solve(M)
myData
myData <- t(myData)
n_links <- colSums(myData)
M <- diag(n_links)
MInv <- solve(M)
eigen(myData %*% MInv)
?solve
load("pageRank.RData")
n_links <- colSums(myData)
M <- diag(n_links)
MInv <- solve(M)
load("pageRank.RData")
## 1. create a link count
n_links <- colSums(myData)
M <- diag(n_links)
## 2. inverse the link matrix
MInv <- solve(M)
# BrokenRank is the eigenvector with eigenvalue 1
BR <- t(myData) %*% MInv
eigen(BR)
MInv
BR <- t(myData) %*% MInv
BR
eigen(BR)
load("pageRank.RData")
myData <- t(myData)
n_links <- colSums(myData)
M <- diag(n_links)
## 2. inverse the link matrix
MInv <- solve(M)
# BrokenRank is the eigenvector with eigenvalue 1
BR_vector <- BR_eig$vectors[, which(signif(BR_eig$values, 6) == 1)]
BR_eig <- eigen(BR)
BR_vector <- BR_eig$vectors[, which(signif(BR_eig$values, 6) == 1)]
BR_vector
BR_eig
?scale
BR_vector <- scale(BR_vector, center = FALSE, scale = apply(BR_vector, 2, sum))
apply(BR_vector, 2, sum)
BR_vector
BR_vector <- scale(BR_vector, center = FALSE, scale = as.numeric(apply(BR_vector, 2, sum)))
BR_vector
BR_eig
n <- nrow(BR)
n
E <- matrix(seq(1, n*n), n, n)
E
E <- matrix(rep(1, n*n), n, n)
E
d <- 0.85
PR <- ((1 - d) / n) * E + d * myData %*% MInv
PR
PR_eig <- eigen(PR)
PR_vector <- PR_eig$vectors[, which(signif(PR_eig$values, 6) == 1)]
PR_vector
PR_vector <- scale(PR_vector, center = FALSE, scale = as.numeric(apply(PR_vector, 2, sum)))
PR_vector <- scale(PR_vector, center = FALSE, scale = as.numeric(sum(PR_vector)))
PR_vector <- PR_eig$vectors[, which(signif(PR_eig$values, 6) == 1)]
PR_vector <- scale(PR_vector, center = FALSE, scale = as.numeric(sum(PR_vector)))
PR_vector
BR_vector <- BR_eig$vectors[, which(signif(BR_eig$values, 6) == 1)]
# normalize
BR_vector <- scale(BR_vector, center = FALSE, scale = as.numeric(apply(as.matrix(BR_vector), 2, sum)))
BR_vector
myNewData <- read.csv("http://www.ats.ucla.edu/stat/data/mat25.txt")
myNewData
dim(myNewData)
?read.csv
myNewData <- read.csv("http://www.ats.ucla.edu/stat/data/mat25.txt", header = FALSE)
myNewData
str(myNewData)
myNewData <- read.csv("http://www.ats.ucla.edu/stat/data/mat25.txt",
header = FALSE, sep = " ")
myNewData
dim(myNewData)
t <- 0.5
str(t)
t <- c(1,2,3)
apply(t, 2, sum)
apply(as.matrix(t), 2, sum)
as.matrix(t)
myNewData
str(myNewData)
t(myNewData)
as.matrix(myNewData)
t <- c(1+2i, 1)
t
as.numeric(t)
