install.packages("xtable")
?xtable
xtable(summary(my_df))
require(xtable)
my_df <- data.frame(x1 = rnorm(20), x2 = rnorm(20))
xtable(summary(my_df))
m1 <- lm(x1~x2, data = my_df)
cooks.distance(m1)
predict(m1, interval = "confidence")
predict(m1, interval = "predict")
?predict
xtable(summary(my_df))
summary(m1)
predict(m1, newdata = rnorm(20), interval = "confidence")
rnorm(20)
predict(m1, newdata = data.frame(rnorm(20)), interval = "confidence")
predict(m1, newdata = data.frame(x2 = rnorm(20)), interval = "confidence")
predict(m1, newdata = data.frame(x2 = rnorm(20)), interval = "predict")
predict(m1, newdata = data.frame(x2 = rnorm(20)), interval = "predict")
test_pi <- predict(m1, newdata = data.frame(x2 = rnorm(20)), interval = "predict")
plot(test_pi$fit)
plot(test_pi[,'fit'])
liens(test_pi[,'fit'])
lines(test_pi[,'fit'])
plot(m1)
old_par <- par(mfrow=c(2,2))
plot(m1)
par(old_par)
qqnorm(m1$residuals)
qqline(m1$residuals)
?qqline
qqnorm(m1$residuals)
qqline(m1$residuals, col = "red")
plot(m1$residuals)
plot(m1$fitted.values, m1$residuals)
my_df <- data.frame(x1 = rnorm(20), x2 = rnorm(20))
m1 <- lm(x1~x2, data = my_df)
qqnorm(m1$residuals)
qqline(m1$residuals, col = "red")
plot(cooks.distance(m1))
longley
plot(longley$Employed)
plot(longley$Population)
hist(longley$Employed)
hist(longley$Population)
plot(density((longley$Employed)))
hist(longley$Employed)
plot(density(longley$Population))
plot(longley$GNP, longley$Employed)
plot(longley$Employed, longley$GNP)
plot(longley$Population, longley$GNP)
lm1 <- lm(GNP ~ Employed + Population, data = longley)
old_par <- par(mfrow=c(2,2))
plot(lm1)
par(old_par)
summary(lm1)
xtable(summary(lm1))
?density
old.par <- par(mfrow = c(1,2))
old.par <- par(mfrow = c(1,2))
plot(density((longley$Employed)))
plot(density(longley$Population))
par(old.par)
old.par <- par(mfrow = c(1,2))
plot(density((longley$Employed)), xlab = "", main = "density of employed")
plot(density(longley$Population), xlab = "", main = "density of population")
par(old.par)
old.par <- par(mfrow = c(3,1))
plot(longley$Employed, longley$GNP)
plot(longley$Population, longley$GNP)
plot(longley$Population, longley$Employed)
par(old.par)
longley
old.par <- par(mfrow = c(1,2))
plot(density((longley$Employed)), xlab = "", main = "density of employed")
plot(density(longley$Population), xlab = "", main = "density of population")
par(old.par)
xtable(summary(lm1))
lm1.table <- xtable(summary(lm1))
print(lm1.table)
summary(Lm1)
summary(lm1)
pairs(longley)
plot(cooks.distance(lm1))
abline(h = 4/nrow(langley))
par(old.par)
abline(h = 4/nrow(langley))
abline(h = 4/nrow(longley))
plot(cooks.distance(lm1))
abline(h = 4/nrow(longley))
par(mfrow=c(1,1))
qqnorm(lm1$residuals)
qqline(lm1$residuals, col = "red")
# constant variance #
plot(lm1$fitted.values, m1$residuals)
plot(lm1$fitted.values, lm1$residuals)
plot(lm1$fitted.values, lm1$residuals)
abline(h = 0)
?plot
plot(lm1$fitted.values, lm1$residuals, type = "p")
plot(lm1$fitted.values, lm1$residuals, type = "p", pch = 19)
abline(h = 0)
plot(lm1$fitted.values, lm1$residuals, type = "p", pch = 19, col = "grey")
plot(lm1$fitted.values, lm1$residuals, type = "p", pch = 19, col = "blue")
plot(lm1$fitted.values, lm1$residuals, type = "p", pch = 19, col = "deepskyblue4")
abline(h = 0)
plot(lm1$fitted.values, lm1$residuals,
type = "p", pch = 19, col = "deepskyblue4",
xlab = "fitted values",
ylab = "residuals")
abline(h = 0)
?abline
plot(lm1$fitted.values, lm1$residuals,
type = "p", pch = 19, col = "deepskyblue4",
xlab = "fitted values",
ylab = "residuals")
abline(h = 0, lwd = 1.2)
abline(h = 0, lwd = 1.5)
abline(h = 0, lwd = 1.5, col = "red")
abline(h = 0, lwd = 1.5, col = "darkorange4")
abline(h = 0, lwd = 1.5, col = "darkorange")
type = "p", pch = 19, col = "deepskyblue",
plot(lm1$fitted.values, lm1$residuals,
type = "p", pch = 19, col = "deepskyblue",
xlab = "fitted values",
ylab = "residuals")
abline(h = 0, lwd = 1.5, col = "darkorange")
qqnorm(lm1$residuals)
qqline(lm1$residuals, col = "red")
plot(lm1$residuals)
plot(lm1$residuals,
type = "p", pch = 19, col = "deepskyblue",
xlab = "fitted values",
ylab = "residuals",
main = "Index Plot")
abline(h = 0, lwd = 1.5, col = "darkorange")
plot(cooks.distance(lm1))
plot(cooks.distance(lm1),
type = "p", pch = 19, col = "deepskyblue",
ylab = "cooks distance",
main = "Cook's Distance")
abline(h = 4/nrow(longley), col = "red")
plot(cooks.distance(lm1),
type = "p", pch = 19, col = "deepskyblue",
ylab = "cooks distance",
main = "Cook's Distance")
abline(h = 4/nrow(longley), lwd = 1.5, col = "darkorange")
old.par <- par(mfrow = c(2,2))
# normality of the residuals, using QQ plot #
qqnorm(lm1$residuals)
qqline(lm1$residuals, col = "red")
# constant variance #
plot(lm1$fitted.values, lm1$residuals,
type = "p", pch = 19, col = "deepskyblue",
xlab = "fitted values",
ylab = "residuals",
main = "Residual Plot")
abline(h = 0, lwd = 1.5, col = "darkorange")
# independence, index plot #
plot(lm1$residuals,
type = "p", pch = 19, col = "deepskyblue",
ylab = "residuals",
main = "Index Plot")
abline(h = 0, lwd = 1.5, col = "darkorange")
# Cook's D
plot(cooks.distance(lm1),
type = "p", pch = 19, col = "deepskyblue",
ylab = "cooks distance",
main = "Cook's Distance")
abline(h = 4/nrow(longley), lwd = 1.5, col = "darkorange")
old.par <- par(mfrow = c(2,2))
# normality of the residuals, using QQ plot #
qqnorm(lm1$residuals, pch = 19, col = "deepskyblue")
qqline(lm1$residuals, col = "darkorange")
# constant variance #
plot(lm1$fitted.values, lm1$residuals,
type = "p", pch = 19, col = "deepskyblue",
xlab = "fitted values",
ylab = "residuals",
main = "Residual Plot")
abline(h = 0, lwd = 1.5, col = "darkorange")
# independence, index plot #
plot(lm1$residuals,
type = "p", pch = 19, col = "deepskyblue",
ylab = "residuals",
main = "Index Plot")
abline(h = 0, lwd = 1.5, col = "darkorange")
# Cook's D
plot(cooks.distance(lm1),
type = "p", pch = 19, col = "deepskyblue",
ylab = "cooks distance",
main = "Cook's Distance")
abline(h = 4/nrow(longley), lwd = 1.5, col = "darkorange")
```
We observe that the normal assumption holds true except for the tail of the residual is a little bit flat (according to QQ plot); the mean of residuals is at zero and the constanct variance holds true as well. \newline
According to Cook's Distance, only two of the points are outliers, which should be fine.
new_df <- data.frame(Population = longley$Population, Employed = mean(longley$Employed))
new_df
GNP_pred_ci <- predict(lm1, newdata = new_df, interval = "confidence")
GNP_pred_pi <- predict(lm1, newdata = new_df, interval = "prediction")
GNP_pred_ci
GNP_pred_pi
str(GNP_pred_ci)
plot(GNP_pred_ci[, "fit"], new_df$Population)
par(old.par)
plot(GNP_pred_ci[, "fit"], new_df$Population)
par(mfrow=c(1,1))
plot(GNP_pred_ci[, "fit"], new_df$Population)
plot(longley$GNP, longley$Population)
line(GNP_pred_ci[, "fit"], new_df$Population)
lines(GNP_pred_ci[, "fit"], new_df$Population)
plot(longley$Population, longley$GNP)
lines(new_df$Population, GNP_pred_ci[, "fit"])
lines(new_df$Population, GNP_pred_ci[, "lwr"], col = "red")
lines(new_df$Population, GNP_pred_ci[, "upr"], col = "red")
lines(new_df$Population, GNP_pred_pi[, "lwr"], col = "blue")
lines(new_df$Population, GNP_pred_pi[, "upr"], col = "blue")
lines(new_df$Population, GNP_pred_ci[, "fit"])
lines(new_df$Population, GNP_pred_ci[, "lwr"], col = "red")
lines(new_df$Population, GNP_pred_ci[, "upr"], col = "red")
lines(new_df$Population, GNP_pred_pi[, "lwr"], col = "blue")
plot(new_df$Population, GNP_pred_ci[, "fit"])
plot(new_df$Population, GNP_pred_ci[, "fit"], type = "l")
lines(new_df$Population, GNP_pred_ci[, "lwr"], col = "red")
lines(new_df$Population, GNP_pred_ci[, "upr"], col = "red")
lines(new_df$Population, GNP_pred_pi[, "lwr"], col = "blue")
lines(new_df$Population, GNP_pred_pi[, "upr"], col = "blue")
plot(new_df$Population, GNP_pred_ci[, "fit"],
type = "l", lwd = 1.5,
xlab = "Population",
ylab = "Fitted GNP",
main = "Confidence Interval vs. Predication Interval")
lines(new_df$Population, GNP_pred_ci[, "lwr"], col = "darkorange", lwd = 1.5)
lines(new_df$Population, GNP_pred_ci[, "upr"], col = "darkorange", lwd = 1.5)
lines(new_df$Population, GNP_pred_pi[, "lwr"], col = "deepskyblue", lwd = 1.5)
lines(new_df$Population, GNP_pred_pi[, "upr"], col = "deepskyblue", lwd = 1.5)
abline(v = mean(new_df$Population), col = "grey")
?liens
?lines
abline(v = mean(new_df$Population), col = "grey", lty = 2)
abline(v = mean(new_df$Population), col = "grey", lty = 3)
plot(new_df$Population, GNP_pred_ci[, "fit"],
type = "l", lwd = 1.5,
xlab = "Population",
ylab = "Fitted GNP",
main = "Confidence Interval vs. Predication Interval")
lines(new_df$Population, GNP_pred_ci[, "lwr"], col = "darkorange", lwd = 1.5)
lines(new_df$Population, GNP_pred_ci[, "upr"], col = "darkorange", lwd = 1.5)
lines(new_df$Population, GNP_pred_pi[, "lwr"], col = "deepskyblue", lwd = 1.5)
lines(new_df$Population, GNP_pred_pi[, "upr"], col = "deepskyblue", lwd = 1.5)
abline(v = mean(new_df$Population), col = "grey", lty = 3)
plot(new_df$Population, GNP_pred_ci[, "fit"],
type = "l", lwd = 1.5,
xlab = "Population",
ylab = "Fitted GNP",
main = "Confidence Interval vs. Predication Interval")
lines(new_df$Population, GNP_pred_ci[, "lwr"], col = "darkorange", lwd = 1.5)
lines(new_df$Population, GNP_pred_ci[, "upr"], col = "darkorange", lwd = 1.5)
lines(new_df$Population, GNP_pred_pi[, "lwr"], col = "deepskyblue", lwd = 1.5)
lines(new_df$Population, GNP_pred_pi[, "upr"], col = "deepskyblue", lwd = 1.5)
abline(v = mean(new_df$Population), col = "grey", lty = 2)
?aline
?abline
library(gamlr) # loads Matrix as well
install.packages("gamlr")
library(gamlr) # loads Matrix as well
help(hockey) # describes the hockey data and shows an example regression
data(hockey) # load the data
config
head(config)
str(config)
str(team)
head(team)
head(player)
head(gaol)
head(goal)
str(goal$homegoal)
str(config)
dim(config)
dim(team)
dim(player)
player[1, ]
dim(player)
dim(config)
dim(team)
team[1,]
x <- cBind(config,team,player) # cBind binds together two sparse matrices
# build 'y': home vs away, binary response
y <- goal$homegoal
nhlreg <- gamlr(x, y,
free=1:(ncol(config)+ncol(team)), ## free denotes unpenalized columns
family="binomial", standardize=FALSE)
Baicc <- coef(nhlreg)[colnames(player),]
dim(Baicc)
Baicc
?gamlr
B <- coef(nhlreg)[colnames(player),]
sum(B!=0) # number of measurable effects (AICc selection)
B[order(-B)[1:10]] # 10 biggest
AICC(nhlreg)
AICc(nhlreg)
?AICc
plot(nhlreg)
plot(nhlreg)
nhlreg <- gamlr(x, y,
free = 1:(ncol(config)+ncol(team)), ## free denotes unpenalized columns
family = "binomial", standardize = FALSE,
verb = TRUE)
plot(nhlreg)
AICc(nhlreg)
plot(AICc(nhlreg))
str(nhlred)
str(nhlreg)
plot(nhlreg$lamba, AICc(nhlreg))
nhlreg$lamba
plot(nhlreg$lambba, AICc(nhlreg))
plot(nhlreg$lambda, AICc(nhlreg))
plot(log(nhlreg$lambda), AICc(nhlreg))
?hockey
str(goal)
B <- coef(nhlreg)[colnames(player),]
B[order(-B)[1:10]] # 10 biggest
