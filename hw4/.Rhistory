sum(dtm[1,])
sum(dtm2[1,])
dtm2 <- scale(dtm, center = FALSE, scale = apply(dtm, 2, function(x) 1/log(D/sum(x == 1))))
sum(dtm2[1,])
dtm2
which(dtm2[1,] == NaN)
sum(dtm2[1,])
str(dtm2)
which(is.null(dtm2[1,]))
dtm2[1,seq(1,10)]
sum(dtm[, "about"])
dtm[, "about"]
dtm2 <- scale(dtm, center = FALSE, scale = apply(dtm, 2, function(x) 1/log(D/sum(x > 0))))
# then normalize
dtm2 <- apply(dtm2, 1, function(x) x/sum(x))
dtm2[, c(1,2)]
dtm2[c(1,2), c(1,2)]
dtm1[c(1,2), c(1,2)]
dtm2 <- scale(dtm, center = FALSE, scale = apply(dtm, 2, function(x) 1/log(D/sum(x > 0))))
# then normalize
dtm2 <- t(apply(dtm2, 1, function(x) x/sum(x)))
dtm1[c(1,2), c(1,2)]
dtm2[c(1,2), c(1,2)]
dtm1 == dtm2
all(dtm1 == dtm2)
ta <- matrix(seq(1,9), 3,3)
tb <- matrix(rep(1,9), 3,3)
ta
tb
ta == tb
any(ta == tb)
all(ta == tb)
dtm3 <- t(apply(dtm, 1, function(x) x/sum(x)))
dtm1[c(1,2), c(1,2)]
dtm3[c(1,2), c(1,2)]
colnames(dtm)
rownames(dtm)
?scale
dtm3[-"tmnt mike"]
dtm3[-c("tmnt mike"), ]
dtm3[-"tmnt mike", ]
dtm3[-3, ]
rownames(dtm3[-3, ])
dtm3 <- t(apply(dtm, 1, function(x) x/sum(x)))
# compute the distance
computeDistance <- function(x, q) {
# input:
# x: a vector of normalized terms for a document
# q: a vector of normalized terms for the query
sqrt(sum((x - q)^2))
}
dtm3[3,]
dtm3[3,1]
rowname()[3]
rownames(dtm3)[3]
dist3 <- apply(dtm3, 1, computeDistance, q = dtm3[3,])
dtm3 <- t(apply(dtm, 1, function(x) x/sum(x)))
# compute the distance
computeDistance <- function(x, q) {
# input:
# x: a vector of normalized terms for a document
# q: a vector of normalized terms for the query
sqrt(sum((x - q)^2))
}
dist3 <- apply(dtm3, 1, computeDistance, q = dtm3[3,])
dist3
min(dist3)
order(dist3)
dist3[order(dist3)]
dist3_dist <- dist(dtm3)
dist3_dist
?dist
hc_single <- hclust(dist3_dist, method = "single")
hc_complete <- hclust(dist3_dist, method = "complete")
oldpar <- par(mfrow =c(1,2))
plot(hc_single , main=" Single Linkage ", xlab="", sub ="", cex =.9)
plot(hc_complete ,main =" Complete Linkage ", xlab="", sub ="", cex =.9)
par(oldpar)
word_count <- apply(dtm, 2, sum)
word_count[order(word_count)[1:20]]
?order
word_count[order(word_count, decreasing = TRUE)[1:20]]
sum(word_count[order(word_count, decreasing = TRUE)[1:20]])/sum(word_count)
?quantile
# how many top words count for 50% of the occurance?
sum(word_count[order(word_count, decreasing = TRUE)[1:50]])/sum(word_count)
sum(word_count[order(word_count, decreasing = TRUE)[1:100]])/sum(word_count)
length(word_count)
round(22.2)
sum(word_count[order(word_count, decreasing = TRUE)[1:round(L/2)]])/sum(word_count)
L <- length(word_count)
sum(word_count[order(word_count, decreasing = TRUE)[1:round(L/2)]])/sum(word_count)
sum(word_count[order(word_count, decreasing = TRUE)[1:round(L/4)]])/sum(word_count)
sum(word_count[order(word_count, decreasing = TRUE)[1:round(L/8)]])/sum(word_count)
sum(word_count[order(word_count, decreasing = TRUE)[1:round(L/16)]])/sum(word_count)
sum(word_count[order(word_count, decreasing = TRUE)[1:round(L/32)]])/sum(word_count)
L/32
sum(word_count[order(word_count, decreasing = TRUE)[1:220]])/sum(word_count)
sum(word_count[order(word_count, decreasing = TRUE)[1:250]])/sum(word_count)
sum(word_count[order(word_count, decreasing = TRUE)[1:260]])/sum(word_count)
sum(word_count[order(word_count, decreasing = TRUE)[1:258]])/sum(word_count)
sum(word_count[order(word_count, decreasing = TRUE)[1:257]])/sum(word_count)
sum(word_count[order(word_count, decreasing = TRUE)[1:256]])/sum(word_count)
t <- list(0)
t
t <- rep(0, L)
t
length(t)
str(t)
percentage_i <- rep(0, L)
t[1:1]
for (i in 1:L) {
percentage_i[i] <- sum(word_count[order(word_count, decreasing = TRUE)[1:i]])/sum(word_count)
}
which(percentage_i == 0.5)
which(signif(percentage_i, 2) == 0.5)
which(signif(percentage_i, 3) == 0.5)
which(signif(percentage_i, 4) == 0.5)
which(signif(percentage_i, 3) == 0.5)
word_count[which(signif(percentage_i, 3) == 0.5)]
sum(word_count[order(word_count, decreasing = TRUE)[1:253]])/sum(word_count)
sum(word_count[order(word_count, decreasing = TRUE)[1:254]])/sum(word_count)
percentage_i[which(signif(percentage_i, 3) == 0.5)]
which(signif(percentage_i, 3) == 0.5)
which(signif(percentage_i, 3) == 0.5) / L
ordered_count <- word_count[order(word_count, decreasing = TRUE)]
ordered_count[1:10]
proportion_i <- ordered_count / ordered_count[1]
proportion_i[:10]
proportion_i[1:10]
plot(x = seq(1, L), y = proportion_i)
plot(x = seq(1, 200), y = proportion_i[1:200])
line(x = seq(1, 200), y = 1/x)
line(x = seq(1, 200), y = 1/seq(1, 200))
lines(x = seq(1, 200), y = 1/seq(1, 200))
?lines
lines(x = seq(1, 200), y = 1/seq(1, 200), col = "red")
plot(x = seq(1, 200), y = proportion_i[1:200], type = "*")
plot(x = seq(1, 200), y = proportion_i[1:200], lty = "solid")
?plot
plot(x = seq(1, 200), y = proportion_i[1:200], type = "p")
plot(x = seq(1, 200), y = proportion_i[1:200], type = "p", bg = "grey")
plot(x = seq(1, 200), y = proportion_i[1:200], type = "p", col = "grey")
plot(x = seq(1, 200), y = proportion_i[1:200], type = "p", col = "grey", pch = 16)
plot(x = seq(1, 200), y = proportion_i[1:200], type = "p", pch = 16)
lines(x = seq(1, 200), y = 1/seq(1, 200), col = "red")
plot(x = seq(1, 200), y = proportion_i[1:200], type = "p", pch = 16, col = "blue")
lines(x = seq(1, 200), y = 1/seq(1, 200), col = "red")
plot(x = seq(1, L), y = proportion_i[1:L], type = "p", pch = 16, col = "blue")
lines(x = seq(1, L), y = 1/seq(1, L), col = "red")
plot(x = seq(1, L), y = -log(proportion_i), type = "p", pch = 16, col = "blue")
lines(x = seq(1, L), y = log(seq(1, L)), col = "red")
# use log transformation -log(y) = log(x)
plot(x = seq(1, L), y = -log(proportion_i), type = "p", pch = 16, col = "blue")
lines(x = seq(1, L), y = log(seq(1, L)), col = "red")
plot(x = seq(1, L), y = -log(proportion_i), type = "p", pch = 16, col = "blue", ylim = c(0, 15))
lines(x = seq(1, L), y = log(seq(1, L)), col = "red")
plot(x = seq(1, L), y = -log(proportion_i), type = "p", pch = 16, col = "blue", ylim = c(0, 10))
lines(x = seq(1, L), y = log(seq(1, L)), col = "red")
plot(x = seq(1, 200), y = -log(proportion_i[1:200]), type = "p", pch = 16, col = "blue", ylim = c(0, 10))
lines(x = seq(1, 200), y = log(seq(1, 200)), col = "red")
A[10, 1] <- 1
A <- matrix(rep(0, 100), 10, 10)
?scan
matrix(scan(), nrow=6)
rbind( c(1,2), c(2,3), c(3,4), c(4,5) ,c(5,6) )
idx <- rbind( c(1,2), c(2,3), c(3,4), c(4,5) ,c(5,6) )
A[idx]
A <- matrix(rep(0, 100), 10, 10)
idx <- rbind(c(10, 1),
c(3, 2), c(6, 2),
c(4, 3), c(10, 3),
c(9, 4),
c(4, 5), c(10, 5),
c(4, 6),
c(5, 7), c(8, 7), c(10, 7),
c(4, 8),
c(8, 9),
c(4, 10))
A[idx] <- 1
A
my_pagerank(A, 0.85)
L <- matrix(rep(0, 100), 10, 10)
idx <- rbind(c(10, 1),
c(3, 2), c(6, 2),
c(4, 3), c(10, 3),
c(9, 4),
c(4, 5), c(10, 5),
c(4, 6),
c(5, 7), c(8, 7), c(10, 7),
c(4, 8),
c(8, 9),
c(4, 10))
L[idx] <- 1
## Compute PageRank
my_pagerank <- function(L, d=0.85) {
##
## The function that calculate the PageRank vector
## for a given link matrix.
##
## Input:
## L, the link matrix
## d, numerical, the dampening parameter
##
## Output:
## p, the PageRank vector
##
# compose the matrix to find the PageRank vector
M <- diag(colSums(L))
MInv <- solve(M)
A <- L %*% MInv
# build a strong conneted Markov Chain
n <- nrow(A)
E <- matrix(rep(1, n*n), n, n)
A <- ((1 - d) / n) * E + d * A
# find the eigenvector
A_eig <- eigen(A)
PR_vector <- A_eig$vectors[, which(signif(A_eig$values, 6) == 1)]
# normalize
p <- scale(PR_vector, center = FALSE,
scale = as.numeric(apply(as.matrix(PR_vector), 2, sum)))
return(as.numeric(p))
}
my_pagerank(L, 0.85)
my_pagerank(L, 1)
## Compute PageRank
my_pagerank <- function(L, d=0.85) {
##
## The function that calculate the PageRank vector
## for a given link matrix.
##
## Input:
## L, the link matrix
## d, numerical, the dampening parameter
##
## Output:
## p, the PageRank vector
##
# compose the matrix to find the PageRank vector
M <- diag(colSums(L))
MInv <- solve(M)
A <- L %*% MInv
# build a strong conneted Markov Chain
n <- nrow(A)
E <- matrix(rep(1, n*n), n, n)
A <- ((1 - d) / n) * E + d * A
# find the eigenvector
A_eig <- eigen(A)
PR_vector <- A_eig$vectors[, which(signif(A_eig$values, 6) == 1)]
# normalize
p <- scale(PR_vector, center = FALSE,
scale = as.numeric(apply(as.matrix(PR_vector), 2, sum)))
#return(as.numeric(p))
return(A_eig)
}
my_pagerank(L, 0.85)
my_pagerank(L, 1)
## Compute PageRank
my_pagerank <- function(L, d=0.85) {
##
## The function that calculate the PageRank vector
## for a given link matrix.
##
## Input:
## L, the link matrix
## d, numerical, the dampening parameter
##
## Output:
## p, the PageRank vector
##
# compose the matrix to find the PageRank vector
M <- diag(colSums(L))
MInv <- solve(M)
A <- L %*% MInv
# build a strong conneted Markov Chain
n <- nrow(A)
E <- matrix(rep(1, n*n), n, n)
A <- ((1 - d) / n) * E + d * A
# find the eigenvector
A_eig <- eigen(A)
PR_vector <- A_eig$vectors[, which(signif(A_eig$values, 6) == 1)]
# normalize
p <- scale(PR_vector, center = FALSE,
scale = as.numeric(apply(as.matrix(PR_vector), 2, sum)))
return(as.numeric(p))
}
my_pagerank(L, 0.85)
## Compute BrokenRank
my_pagerank(L, 1)
## In BrokenRank we are only getting the ranks for page 4, 8, and 9.
load("hw1prob3.Rdata")
ls()
x
d
dim(x)
dim(d)
str(d)
hc_single_4 <- hclust(d, method = "single")
plot(hc_single_4, hang = -1)
plot(hc_single_4, hang = -1, xlab = "label")
plot(hc_single_4, hang = -1, xlab = "")
plot(hc_single_4, hang = -1e-10, xlab = "")
plot(hc_single_4, hang = -1e-2, xlab = "")
plot(hc_single_4, hang = -1e-2, xlab = "")
plot(hc_single_4, hang = -1, xlab = "")
cutree(hc_single_4, k = 4)
plot(hc_single_4, col = "#487AA1", col.main = "#45ADA8", col.lab = "#7C8071",
col.axis = "#F38630", hang = -1, xlab = "")
x
plot(x[,1:2], col =Cols(c_labels), pch =19, xlab ="X1",ylab="X2")
# reference: ISLR 10.6.1
Cols <- function (vec) {
cols=rainbow (length (unique (vec )))
return (cols[as.numeric (as.factor (vec))])
}
plot(x[,1:2], col =Cols(c_labels), pch =19, xlab ="X1",ylab="X2")
c_labels <- cutree(hc_single_4, k = 4)
plot(x[,1:2], col =Cols(c_labels), pch =19, xlab ="X1",ylab="X2")
plot(hc_single_4, col = "#487AA1", col.main = "#45ADA8", col.lab = "#7C8071",
col.axis = "#F38630", hang = -1, xlab = "")
hc_complete_4 <- hclust(d, method = "complete")
# cut into 4 clusters
c_labels <- cutree(hc_complete_4, k = 4)
# plot points in x
# reference: ISLR 10.6.1
Cols <- function (vec) {
cols=rainbow (length (unique (vec )))
Cols <- function (vec) {
cols=rainbow (length (unique (vec )))
return (cols[as.numeric (as.factor (vec))])
}
plot(x[,1:2], col =Cols(c_labels), pch =19, xlab ="X1",ylab="X2")
)
Cols <- function (vec) {
cols=rainbow (length (unique (vec )))
return (cols[as.numeric (as.factor (vec))])
}
hc_complete_4 <- hclust(d, method = "complete")
# cut into 4 clusters
c_labels <- cutree(hc_complete_4, k = 4)
# plot points in x
plot(x[,1:2], col =Cols(c_labels), pch =19, xlab ="X1",ylab="X2")
plot(hc_complete_4, col = "#487AA1", col.main = "#45ADA8", col.lab = "#7C8071",
col.axis = "#F38630", hang = -1, xlab = "")
hclust_and_plot <- function(x, d, method) {
##
## Input:
## x, the data matrix
## d, the pairwise Euclidean distance
## method, the hierarchical clustering linkage
##
## Returns:
## No returned object
##
hc_4 <- hclust(d, method = "single")
# cut into 4 clusters
c_labels <- cutree(hc_4, k = 4)
# plot points in x
plot(x[,1:2], col =Cols(c_labels), pch =19, xlab ="X1",ylab="X2")
# plot dendorgram
plot(hc_4, col = "#487AA1", col.main = "#45ADA8", col.lab = "#7C8071",
col.axis = "#F38630", hang = -1, xlab = "")
}
hclust_and_plot(x, d, "single")
hclust_and_plot(x, d, "complete")
hclust_and_plot <- function(x, d, method) {
##
## Input:
## x, the data matrix
## d, the pairwise Euclidean distance
## method, the hierarchical clustering linkage
##
## Returns:
## A list of two plots
##
hc_4 <- hclust(d, method = "single")
# cut into 4 clusters
c_labels <- cutree(hc_4, k = 4)
# plot points in x
points_plot <- plot(x[,1:2], col =Cols(c_labels), pch =19, xlab ="X1",ylab="X2")
# plot dendorgram
dendro_plot <- plot(hc_4, col = "#487AA1", col.main = "#45ADA8", col.lab = "#7C8071",
col.axis = "#F38630", hang = -1, xlab = "")
return(list(points_plot, dendro_plot))
}
hclust_and_plot(x, d, "single")
tx <- plot(x)
tx
?plot
hclust_and_plot(x, d, "single")
hclust_and_plot(x, d, "complete")
hclust_and_plot <- function(x, d, method) {
##
## Input:
## x, the data matrix
## d, the pairwise Euclidean distance
## method, the hierarchical clustering linkage
##
## Returns:
## No returned object
##
hc_4 <- hclust(d, method = method)
# cut into 4 clusters
c_labels <- cutree(hc_4, k = 4)
# plot points in x
plot(x[,1:2], col =Cols(c_labels), pch =19, xlab ="X1",ylab="X2")
# plot dendorgram
plot(hc_4, col = "#487AA1", col.main = "#45ADA8", col.lab = "#7C8071",
col.axis = "#F38630", hang = -1, xlab = "")
}
# run hierarchical agglomerative clustering with single linkage
hclust_and_plot(x, d, "single")
hclust_and_plot(x, d, "complete")
hclust_and_plot(x, d^2, "single")
hclust_and_plot(x, d^2, "complete")
hclust_and_plot <- function(x, d, method) {
##
## Input:
## x, the data matrix
## d, the pairwise Euclidean distance
## method, the hierarchical clustering linkage
##
## Returns:
## No returned object
##
hc_4 <- hclust(d, method = method)
# cut into 4 clusters
c_labels <- cutree(hc_4, k = 4)
oldpar <- par(mfrow = c(2, 1))
# plot points in x
plot(x[,1:2], col =Cols(c_labels), pch =19, xlab ="X1",ylab="X2")
# plot dendorgram
plot(hc_4, col = "#487AA1", col.main = "#45ADA8", col.lab = "#7C8071",
col.axis = "#F38630", hang = -1, xlab = "")
par(oldpar)
}
hclust_and_plot(x, d, "single")
hclust_and_plot <- function(x, d, method) {
##
## Input:
## x, the data matrix
## d, the pairwise Euclidean distance
## method, the hierarchical clustering linkage
##
## Returns:
## No returned object
##
hc_4 <- hclust(d, method = method)
# cut into 4 clusters
c_labels <- cutree(hc_4, k = 4)
oldpar <- par(mfrow = c(1, 2))
# plot points in x
plot(x[,1:2], col =Cols(c_labels), pch =19, xlab ="X1",ylab="X2")
# plot dendorgram
plot(hc_4, col = "#487AA1", col.main = "#45ADA8", col.lab = "#7C8071",
col.axis = "#F38630", hang = -1, xlab = "")
par(oldpar)
}
hclust_and_plot(x, d, "single")
hclust_and_plot <- function(x, d, method) {
##
## Input:
## x, the data matrix
## d, the pairwise Euclidean distance
## method, the hierarchical clustering linkage
##
## Returns:
## No returned object
##
hc_4 <- hclust(d, method = method)
# cut into 4 clusters
c_labels <- cutree(hc_4, k = 4)
# plot points in x
plot(x[,1:2], col =Cols(c_labels), pch =19, xlab ="X1",ylab="X2")
# plot dendorgram
plot(hc_4, col = "#487AA1", col.main = "#45ADA8", col.lab = "#7C8071",
col.axis = "#F38630", hang = -1, xlab = "")
}
# run hierarchical agglomerative clustering with single linkage
hclust_and_plot(x, d, "single")
hclust_and_plot(x, d, "average")
hclust_and_plot(x, d^2, "average")
hclust_and_plot <- function(x, d, k = 4, method) {
##
## Input:
## x, the data matrix
## d, the pairwise Euclidean distance
## k, number of clusters chosen
## method, the hierarchical clustering linkage
##
## Returns:
## No returned object
##
hc_4 <- hclust(d, method = method)
# cut into 4 clusters
c_labels <- cutree(hc_4, k = k)
# plot points in x
plot(x[,1:2], col =Cols(c_labels), pch =19, xlab ="X1",ylab="X2")
# plot dendorgram
plot(hc_4, col = "#487AA1", col.main = "#45ADA8", col.lab = "#7C8071",
col.axis = "#F38630", hang = -1, xlab = "")
}
hclust_and_plot(x, d, k = 3, "average")
hclust_and_plot(x, d^2, k = 3, "average")
v1 <- c(1, 2, 3)
v2 <- c(3, 3, 3)
v1 - v2
v1^2
v2^2
v2 * v1
v1^2 + v2^2 - v1 * v2
v1^2 + v2^2 - 2 *v1 * v2
